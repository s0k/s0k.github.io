<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>s0k</title>
    <link>https://s0k.github.io/</link>
    <description>Recent content on s0k</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Feb 2021 17:33:33 +0800</lastBuildDate>
    
	<atom:link href="https://s0k.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bug Bounty Tips</title>
      <link>https://s0k.github.io/post/bug-bounty-tips/</link>
      <pubDate>Fri, 19 Feb 2021 17:33:33 +0800</pubDate>
      
      <guid>https://s0k.github.io/post/bug-bounty-tips/</guid>
      <description>​ bug-bounty-tips BBT1-10 – Filter out noise in Burp Suite 在使用Burp Suite进行测试时， 可能需要将这些模式添加到Burp Suite&amp;gt;代理&amp;gt;选项&amp;gt; TLS Pass Through设置中：
.*\.google\.com .*\.gstatic\.com .*\.googleapis\.com .*\.pki\.goog .*\.mozilla\..* 现在，与这些主机的所有基础连接都将直接转到它们，而无需通过代理。
我们的代理日志中不再有干扰！
BBT7-3 – Tests for identifying SQL injections 100% 如果存在以下情况，这是100％的时间找到SQL注入的方法：
/?q=1 /?q=1&amp;#39; /?q=1&amp;#34; /?q=[1] /?q[]=1 /?q=1` /?q=1\ /?q=1/*&amp;#39;*/ /?q=1/*!1111&amp;#39;*/ /?q=1&amp;#39;||&amp;#39;asd&amp;#39;||&amp;#39; &amp;lt;== concat string /?q=1&amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1 /?q=1 or 1=1 /?q=&amp;#39;or&amp;#39;&amp;#39;=&amp;#39; 针对以下情况使用这些模式：http://target.com/?q=HERE
BBT7-13 – List of 14 Google dorks for recon and easy wins 以下是14个有趣的Google黑客搜索技巧，
它们可以帮助我们对目标域进行侦查，也可以找到一些简单的方法：
# Login panel search site:target.</description>
    </item>
    
    <item>
      <title>Ms17-010</title>
      <link>https://s0k.github.io/post/ms17-010/</link>
      <pubDate>Tue, 01 Dec 2020 15:53:10 +0800</pubDate>
      
      <guid>https://s0k.github.io/post/ms17-010/</guid>
      <description>Nas_ms17_010
浅析Nessus、Nmap针对MS17-010的远程精确扫描方案
MS17-010 漏洞利用总结</description>
    </item>
    
    <item>
      <title>Learn</title>
      <link>https://s0k.github.io/learn/</link>
      <pubDate>Wed, 04 Nov 2020 07:37:27 +0800</pubDate>
      
      <guid>https://s0k.github.io/learn/</guid>
      <description>SRC挖掘 分享几个绕过URL跳转限制的思路
https://www.anquanke.com/post/id/94377
【技术分享】聊聊越权那些事儿
https://www.anquanke.com/post/id/84892
白帽子如何快速挖到人生的第一个漏洞 | 购物站点挖掘商城漏洞
https://mp.weixin.qq.com/s/epTNHV1eyXXUA141jWIwuA
​
JAVA反序列化 c3p0的三个gadget
http://redteam.today/2020/04/18/c3p0的三个gadget/
​
一句话反弹shell生成器 https://ares-x.com/tools/reverse-shell/
反弹shell集合
https://weibell.github.io/reverse-shell-generator/
Java Runtime bash编码
http://jackson-t.ca/runtime-exec-payloads.html
​
基于零组公开漏洞库 https://ares-x.com/wiki#/</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://s0k.github.io/about/</link>
      <pubDate>Wed, 07 Aug 2019 21:37:53 +0800</pubDate>
      
      <guid>https://s0k.github.io/about/</guid>
      <description>欲速则不达</description>
    </item>
    
    <item>
      <title>docker 笔记</title>
      <link>https://s0k.github.io/post/dockermark/</link>
      <pubDate>Sat, 22 Jun 2019 17:33:33 +0800</pubDate>
      
      <guid>https://s0k.github.io/post/dockermark/</guid>
      <description>docker 与 传统虚拟机的不同之处：
1.传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上运行所需应用程序。
2.容器内的应用进程直接运行与宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。
3.每个容器之间互相隔离，每个容器都有自己的文件系统，容器之间进程不会相互影响，能区分计算资源。
三要素
REPOSITORY 仓库
IMAGE 镜像
container 容器
Docker是一个容器运行载体（管理引擎）
镜像（IMAGE）：应用程序和配置依赖打包好的可交付的运行环境
仓库保存镜像，是存放镜像的场所
镜像可以创建多个容器（类可以创建多个对象）
TAG 标签就相当于版本号
docker底层原理 docker 是一个Client-Server结构的系统，docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器是一个运行时环境。
为什么docker比vmware快？
1.docker 有更少的抽象层，
docker Engine替换了硬件资源虚拟化（Hypervisor）
2.docker利用宿主机内核不需要Guest OS（vmware需要重新加载操作系统内核）
面向软件开发者
Docker帮助命令 docker版本
docker version
docker描述
docker info
docker帮助
docker &amp;ndash;help
Docker镜像命令 镜像-类 一个镜像可以形成多个容器实例
鲸鱼背上有集装箱
蓝色的大海里面 &amp;ndash; 宿主机系统（ubuntu）
鲸鱼 &amp;ndash; docker
集装箱 &amp;ndash; 容器实例 from 来自镜像模板
镜像命令 列出本地主机上的镜像 docker images
REPOSITORY 表示镜像的仓库源
TAG 镜像的标签（版本）
IMAGE ID 镜像ID
CREATED 镜像创建时间
SIZE 镜像大小</description>
    </item>
    
    <item>
      <title>Git 笔记</title>
      <link>https://s0k.github.io/post/git/</link>
      <pubDate>Sat, 15 Jun 2019 00:31:37 +0800</pubDate>
      
      <guid>https://s0k.github.io/post/git/</guid>
      <description>需参考
Git 学习
Git属于分布式版本控制系统（SVN属于集中式版本控制系统）
Git基础设置 设置签名（作用是区分每个人）
1.设置用户名
Git config --global user.name &#39;s0k&#39;
2.设置用户名邮箱
Git config --global user.email &#39;s0k@qq.com&#39;
设置的签名和github账号没关系（可以不一样）
签名级别
1.项目级别/仓库级别：仅在本地库范围内有效
git config user.name/email tom
2.系统用户级别：登录当前操作系统的用户范围
git config --global user.name/email tom
注： .git文件为隐藏文件，里面有config文件，储存着用户名和邮箱以及密码。
比如：url = git@github.com:s0k/s0k.github.io.git
Git 核心 Git 最核心的一个概念就是工作流。
 工作区(Workspace)是电脑中实际的目录。 暂存区(Index)类似于缓存区域，临时保存你的改动。 仓库区(Repository)，分为本地仓库和远程仓库。  创建版本库 ​	版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以&amp;quot;还原&amp;rdquo;。
git init 1.创建文件夹 mkdir test #新建文件夹
2.在文件夹内初始化Git（创建Git仓库）
cd test
git init  #初始化（初始化后会在本地创建一个隐藏的.git文件，这个目录是Git来跟踪管理版本库的）
向仓库提交文件 1.创建a.py文件
touch a.py
git add从工作区提交到暂存区 git commit从暂存区提交到本地仓库 git push或git svn dcommit从本地仓库提交到远程仓库 文件流程：工作区 -- 暂存区 -- Git仓库 2.</description>
    </item>
    
    <item>
      <title>Blog Notes</title>
      <link>https://s0k.github.io/post/blog-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://s0k.github.io/post/blog-notes/</guid>
      <description>20201103 更新文章：
  docker笔记
  git
  待完成：  添加目录 添加favicon.ico 修改摘要方式 启用Tags  20191207 🍊 博客搭建
Other /learn</description>
    </item>
    
  </channel>
</rss>
